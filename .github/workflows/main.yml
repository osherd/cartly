name: Cartly Monorepo CI/CD

on:
  push:
    paths:
      - 'frontend/**'
      - 'backend/auth_service/**'
      - '.github/workflows/main.yml'

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/cartly-frontend:latest .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Debug DockerHub repository
        run: 'echo "Pushing to repository: ${{ secrets.DOCKERHUB_USERNAME }}/cartly-frontend:latest"'

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/cartly-frontend:latest

  auth-service-build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend/auth_service
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      PGUSER: testuser
      PGPASSWORD: testpass
      PGDATABASE: testdb
      LOCAL_CONNECTION_STRING: postgres://testuser:testpass@localhost:5432/testdb
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Test PostgreSQL connection
        run: |
          until pg_isready -h localhost -U $PGUSER -d $PGDATABASE; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done
          echo "PostgreSQL is ready and accepting connections."

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest
